        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:#define CACHE_SIZE 1000000
        -:   22:#ifdef CACHE_SIZE
        -:   23:int cache[CACHE_SIZE];
        -:   24:#endif 
        -:   25:
        -:   26:// ------------
        -:   27:// collatz_read
        -:   28:// ------------
        -:   29:
function _Z12collatz_readRKSs called 16 returned 100% blocks executed 80%
       16:   30:pair<int, int> collatz_read (const string& s) {
       16:   31:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   32:    int i;
        -:   33:    int j;
       16:   34:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       16:   35:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   36:
        -:   37:// ------------
        -:   38:// collatz_eval
        -:   39:// ------------
        -:   40:
function _Z12collatz_evalii called 19 returned 100% blocks executed 95%
       19:   41:int collatz_eval (int i, int j) {
        -:   42:
       19:   43:    int max = 0;
       19:   44:    int counter = 1;
        -:   45:
       19:   46:    if(i > j){  // the case if input is in reverse order
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        4:   47:        int temp = j;
        4:   48:        j = i;
        4:   49:        i = temp;
        -:   50:    }
        -:   51:
        -:   52:    /*
        -:   53:    Given positive integers, b and e, let m = (e / 2) + 1.
        -:   54:    If b < m, then max_cycle_length(b, e) = max_cycle_length(m, e).
        -:   55:    Discussed this optimization in a quiz in class.
        -:   56:    */
       19:   57:    int halfVal = (j/2) + 1;
        -:   58:    
       19:   59:    if (i < halfVal){
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
       11:   60:       i = halfVal;
        -:   61:    }
        -:   62:
    49882:   63:    for(int start = i; start <= j; start++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    49863:   64:        int temp = start;
        -:   65:
  5336962:   66:        while(temp != 1){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  5237236:   67:            if(temp < 1000000){ //only deal with indices inside the upper bound
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  5212662:   68:                if(cache[temp] != 0){ //if entry is not empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   69:                    counter += cache[temp]; //add current counter to prev value
        -:   70:                }
        -:   71:            }
  5237236:   72:            if(temp % 2 == 0){ //even number case
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
  3501889:   73:                temp = temp/2;
  3501889:   74:                counter++;
        -:   75:            } else{ //odd number case
  1735347:   76:                temp = (temp * 3) + 1;
  1735347:   77:                counter++;
        -:   78:            }
        -:   79:        }
        -:   80:
    49863:   81:        if(cache[temp] == 0){ //if entry not present in cache, then cache it
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   82:            cache[temp] = counter;
        -:   83:        }
        -:   84:
    49863:   85:        if(counter > max){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       75:   86:            max = counter;
        -:   87:        }
        -:   88:
    49863:   89:        counter = 1;
        -:   90:    }
        -:   91:
       19:   92:    return max;
        -:   93:}
        -:   94:
        -:   95:// -------------
        -:   96:// collatz_print
        -:   97:// -------------
        -:   98:
function _Z13collatz_printRSoiii called 16 returned 100% blocks executed 100%
       16:   99:void collatz_print (ostream& w, int i, int j, int v) {
       16:  100:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  101:
        -:  102:// -------------
        -:  103:// collatz_solve
        -:  104:// -------------
        -:  105:
function _Z13collatz_solveRSiRSo called 4 returned 100% blocks executed 80%
        4:  106:void collatz_solve (istream& r, ostream& w) {
        4:  107:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20:  108:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 75%
branch  7 taken 25% (fallthrough)
       12:  109:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  110:        const int            i = p.first;
       12:  111:        const int            j = p.second;
       12:  112:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I_cache called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       19:  113:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
